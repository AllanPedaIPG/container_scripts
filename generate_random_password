#!/bin/bash

set -eEuo pipefail

# For simplicity the generated random string
# is non-repeating so not as robust as it could be

resize_array(){
    declare -a inarr=("${@:1:$#-1}")
    declare -i nusz=${@: -1}
    outarr=("${inarr[@]}")
    while (( $nusz > ${#outarr[@]} ))
    do
        outarr+=("${inarr[@]:0:$nusz}")
    done
    echo "${outarr[@]:0:$nusz}"
} # resize_array()

jumble_array(){
     declare -a deck=("${@}")
     declare -a shuf=()
     declare -i cdct=${#deck[@]}
     while [[ ${#shuf[@]} -lt $cdct ]]
     do
         declare -i pik=$(((RANDOM+1) % ${#deck[@]}))
         shuf+=("${deck[$pik]}")
         unset "deck[$pik]"
         # "re-rack" the array to avoid undefined error
         if [[ "${#deck[@]}" -gt 0 ]]; then
             declare -a t=("${deck[@]}"); deck=("${t[@]}")
         fi
     done
     echo "${shuf[@]}"
} # jumble_array()

# returns a random character
grab_char(){
    declare -a deck=("${@}")
    declare -i pik=$(((RANDOM+1) % ${#deck[@]}));
    echo "${deck[$pik]}"
} # grab_char()

generate_random_password(){
    declare -i len=$1
    declare -ci minlen=8
    IFS=$' \t\n'
    declare -a upc lwc num
    # three categories of character
    read -a upc < <(echo {A..Z})
    read -a lwr < <(echo {a..z})
    read -a num < <(echo {0..9})
    # start result array with one random mandatory char from each set
    declare -a result=("$(grab_char \# \@ \%)")
    result+=("$(grab_char "${upc[@]}")")
    result+=("$(grab_char "${lwr[@]}")")
    result+=("$(grab_char "${num[@]}")")
    # enforce minumum length
    if [[ $len -lt ${#result[@]} ]]; then
        declare -i old=$len
        len=$((${#result[@]}+minlen))
        printf "WARNING min length not met, increasing from %d to %d.\n" $old $len >&2
    fi
    declare -a shuf=() unshuf=()
    # generate bulk of our random string
    unshuf=("${upc[@]}" "${lwr[@]}" "${num[@]}")
    declare -i j
    # allows for duplicate chars
    for (( j=0; j<${#unshuf[@]}; j++ )); do
        shuf[$j]="$(grab_char "${unshuf[@]}")"
    done
    # trim shuf array, deducting for len of array with mandatory chars
    shuf=($(resize_array "${shuf[@]}" $(($len-${#result[@]}))))
    # prepend mandatory chars (now adlusted for final desired length)
    result+=("${shuf[@]}")
    # and re-shufle
    printf '%s' $(jumble_array "${result[@]}"); echo
    # declare -p shuf
} # generate_random_password()

generate_random_password "$@"
